{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","weatherIcon","temp_celcius","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celcius","calCel","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeID","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f35c244.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather = (props) =>{\r\n    return(\r\n        <div className=\"container text-light\">\r\n            <div className=\"cards pt-4\">\r\n                <h1>{props.city}\r\n                </h1>\r\n                <h5 className=\"py-4\">\r\n                   <i className={`wi ${props.weatherIcon} display-1`}></i> \r\n                </h5>\r\n                {props.temp_celcius?(<h1 className=\"py-2\">{props.temp_celcius}&deg;</h1>):null}\r\n                \r\n\r\n                {/*show max-min */}\r\n                {minmaxTemp(props.temp_min,props.temp_max)}\r\n\r\n                <h4 className=\"py-3\">{props.description}</h4>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction minmaxTemp(min,max){\r\n    if(min && max){\r\n        return(\r\n            <h3>\r\n                <span className=\"px-4\">{min}&deg;</span>\r\n                <span className=\"px-4\">{max}&deg;</span>\r\n            </h3>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport \"./form.style.css\";\r\nconst Form=props=>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div>{props.error?error(): null}</div>\r\n            <form onSubmit={props.loadweather}>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 offset-md-2\">\r\n                    <input type=\"text\" className=\"form-control\" name=\"city\" autoComplete=\"off\" placeholder=\"city\"/>\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                    <input type=\"text\" className=\"form-control\" name=\"country\" autoComplete=\"off\" placeholder=\"country\" />\r\n                </div>\r\n                <div className=\"col-md-3 mt-md-0 text-md-left\">\r\n                    <button className=\"btn btn-warning\">Get Weather</button>\r\n                </div>\r\n            </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please Enter City and Country\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Form;","import React from 'react';\nimport { Component } from 'react';\nimport './App.css';\nimport 'weather-icons/css/weather-icons.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Weather from \"./app_component/weather.component\";\nimport Form from \"./app_component/form.component\";\n\n\nconst API_key=\"d959064328a4d86ca33ad1d620d90e17\";\n\n\n\n class App extends React.Component{\n   constructor(){\n     super();\n     this.state={\n       city:undefined,\n       country: undefined,\n       icon : undefined,\n       main: undefined,\n       celcius: undefined,\n       temp_max: undefined,\n       temp_min:undefined,\n       description: \"\",\n       error: false\n     };\n\n     this.weatherIcon={\n       Thunderstorm: \"wi-thunderstorm\",\n       Drizzle:\"wi-sleet\",\n       Rain:\"wi-storm-showers\",\n       Snow:\"wi-snow\",\n       Atmosphere:\"wi-fog\",\n       Clear:\"wi-day-sunny\",\n       Clouds:\"wi-day-fog\"\n     };\n   }\n\n   calCel(temp){\n     let cel=Math.floor(temp-273.15);\n      return cel;\n   }\n\n   get_WeatherIcon(icons,rangeID){\n     switch(true){\n      case rangeID>=200 && rangeID<=232:\n         this.setState({icon:this.weatherIcon.Thunderstorm});\n         break;\n      case rangeID>=300 && rangeID<=321:\n        this.setState({icon:this.weatherIcon.Drizzle});\n        break;\n      case rangeID>=500 && rangeID<=531:\n        this.setState({icon:this.weatherIcon.Rain});\n        break;  \n      case rangeID>=600 && rangeID<=622:\n        this.setState({icon:this.weatherIcon.Snow});\n        break;  \n      case rangeID>=701 && rangeID<=781:\n        this.setState({icon:this.weatherIcon.Atmosphere});\n        break;\n      case rangeID===800:\n        this.setState({icon:this.weatherIcon.Clear});\n        break;\n      case rangeID>=801 && rangeID<=804:\n        this.setState({icon:this.weatherIcon.Clouds});\n        break;\n        \n      default:\n        this.setState({icon:this.weatherIcon.Clouds});\n     }\n   }\n\n\n   getWeather = async(e)=>{\n\n    e.preventDefault();\n\n    const city=e.target.elements.city.value;\n    const country=e.target.elements.country.value;\n\n\n    if(city && country){\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`);\n\n      const response = await api_call.json();\n      console.log(response);\n\n      this.setState({\n          city: `${response.name},${response.sys.country}`,\n          celcius: this.calCel(response.main.temp), \n          temp_max: this.calCel(response.main.temp_max), \n          temp_min: this.calCel(response.main.temp_min),\n          description: response.weather[0].description,\n          \n      });\n\n          this.get_WeatherIcon(this.weatherIcon,response.weather[0].id);\n\n\n    }else{\n      this.setState({error:true});\n    }\n\n\n   };\n\n   render(){\n     return (\n        <div className=\"App\">\n          <Form loadweather={this.getWeather} error={this.state.error}/>\n        <Weather city={this.state.city} \n        country={this.state.country}\n        temp_celcius={this.state.celcius}\n        temp_max={this.state.temp_max}\n        temp_min={this.state.temp_min}\n        description={this.state.description}\n        weatherIcon={this.state.icon}\n        \n        />\n        </div>\n     );\n   }\n }\n export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}